diff --git a/node_modules/expo-modules-core/CHANGELOG.md b/node_modules/expo-modules-core/CHANGELOG.md
index cc015ac..3fb7a78 100644
--- a/node_modules/expo-modules-core/CHANGELOG.md
+++ b/node_modules/expo-modules-core/CHANGELOG.md
@@ -10,22 +10,6 @@
 
 ### üí° Others
 
-## 2.2.3 ‚Äî 2025-03-11
-
-### üêõ Bug fixes
-
-- Fixed `kotlinx.coroutines.CancellableContinuationImpl.alreadyResumedError` error on Android. ([#35114](https://github.com/expo/expo/pull/35114) by [@kudo](https://github.com/kudo))
-
-## 2.2.2 ‚Äî 2025-02-14
-
-### üéâ New features
-
-- [iOS] Support async functions by SwiftUI views ([#34853](https://github.com/expo/expo/pull/34853) by [@jakex7](https://github.com/jakex7))
-
-## 2.2.1 ‚Äî 2025-02-06
-
-_This version does not introduce any user-facing changes._
-
 ## 2.2.0 ‚Äî 2025-01-27
 
 ### üéâ New features
diff --git a/node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle b/node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle
index 4ec4514..d57967c 100644
--- a/node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle
+++ b/node_modules/expo-modules-core/android/ExpoModulesCorePlugin.gradle
@@ -27,7 +27,6 @@ class KotlinExpoModulesCorePlugin implements Plugin<Project> {
           "1.8.22": "1.8.22-1.0.11",
           "1.9.23": "1.9.23-1.0.20",
           "1.9.24": "1.9.24-1.0.20",
-          "1.9.25": "1.9.25-1.0.20",
           "2.0.21": "2.0.21-1.0.28"
         ]
 
@@ -35,7 +34,7 @@ class KotlinExpoModulesCorePlugin implements Plugin<Project> {
           ? project.rootProject.ext.get("kspVersion")
           : kspVersionsMap.containsKey(project.ext.kotlinVersion())
           ? kspVersionsMap.get(project.ext.kotlinVersion())
-          : "1.9.25-1.0.20"
+          : "1.9.24-1.0.20"
       }
     }
   }
diff --git a/node_modules/expo-modules-core/android/build.gradle b/node_modules/expo-modules-core/android/build.gradle
index 05c45a6..f88f888 100644
--- a/node_modules/expo-modules-core/android/build.gradle
+++ b/node_modules/expo-modules-core/android/build.gradle
@@ -3,7 +3,7 @@ import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
 apply plugin: 'com.android.library'
 
 group = 'host.exp.exponent'
-version = '2.2.3'
+version = '2.2.0'
 
 def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
 apply from: expoModulesCorePlugin
@@ -86,7 +86,7 @@ android {
   defaultConfig {
     consumerProguardFiles 'proguard-rules.pro'
     versionCode 1
-    versionName "2.2.3"
+    versionName "2.2.0"
     buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled.toString()
 
     testInstrumentationRunner "expo.modules.TestRunner"
@@ -118,11 +118,7 @@ android {
 
   if (KOTLIN_MAJOR_VERSION < 2) {
     composeOptions {
-      def versionsMap = [
-        "1.9.24": "1.5.14",
-        "1.9.25": "1.5.15",
-      ]
-      kotlinCompilerExtensionVersion = versionsMap[kotlinVersion()]
+      kotlinCompilerExtensionVersion = "1.5.14"
     }
   }
 
diff --git a/node_modules/expo-modules-core/android/src/main/java/expo/modules/kotlin/activityaware/AppCompatActivityAware.kt b/node_modules/expo-modules-core/android/src/main/java/expo/modules/kotlin/activityaware/AppCompatActivityAware.kt
index cd90a84..a604a0d 100644
--- a/node_modules/expo-modules-core/android/src/main/java/expo/modules/kotlin/activityaware/AppCompatActivityAware.kt
+++ b/node_modules/expo-modules-core/android/src/main/java/expo/modules/kotlin/activityaware/AppCompatActivityAware.kt
@@ -38,10 +38,8 @@ suspend inline fun <R> AppCompatActivityAware.withActivityAvailable(
 ): R = suspendCancellableCoroutine { continuation ->
   val listener = object : OnActivityAvailableListener {
     override fun onActivityAvailable(activity: AppCompatActivity) {
-      if (continuation.isActive) {
-        removeOnActivityAvailableListener(this)
-        continuation.resumeWith(runCatching { onActivityAvailable(activity) })
-      }
+      removeOnActivityAvailableListener(this)
+      continuation.resumeWith(runCatching { onActivityAvailable(activity) })
     }
   }
   addOnActivityAvailableListener(listener)
diff --git a/node_modules/expo-modules-core/ios/Api/Factories/ViewFactories.swift b/node_modules/expo-modules-core/ios/Api/Factories/ViewFactories.swift
index 856687c..de387a6 100644
--- a/node_modules/expo-modules-core/ios/Api/Factories/ViewFactories.swift
+++ b/node_modules/expo-modules-core/ios/Api/Factories/ViewFactories.swift
@@ -19,13 +19,6 @@ public func View<Props: ExpoSwiftUI.ViewProps, ViewType: ExpoSwiftUI.View<Props>
   return ExpoSwiftUI.ViewDefinition(ViewType.self)
 }
 
-public func View<Props: ExpoSwiftUI.ViewProps, ViewType: ExpoSwiftUI.View<Props>>(
-  _ viewType: ViewType.Type,
-  @ExpoSwiftUI.ViewDefinitionBuilder<ViewType> _ elements: @escaping () -> [AnyViewDefinitionElement]
-) -> ExpoSwiftUI.ViewDefinition<Props, ViewType> {
-  return ExpoSwiftUI.ViewDefinition(ViewType.self, elements: elements())
-}
-
 // MARK: Props
 
 /**
diff --git a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
index 9bd1756..1f96996 100644
--- a/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
+++ b/node_modules/expo-modules-core/ios/AppDelegates/ExpoAppDelegate.swift
@@ -130,56 +130,56 @@ open class ExpoAppDelegate: ExpoAppInstance {
 
   // MARK: - Handling Remote Notification Registration
 
-  open override func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
-    subscribers.forEach { $0.application?(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken) }
-  }
-
-  open override func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
-    subscribers.forEach { $0.application?(application, didFailToRegisterForRemoteNotificationsWithError: error) }
-  }
-
-  open override func application(
-    _ application: UIApplication,
-    didReceiveRemoteNotification userInfo: [AnyHashable: Any],
-    fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void
-  ) {
-    let selector = #selector(application(_:didReceiveRemoteNotification:fetchCompletionHandler:))
-    let subs = subscribers.filter { $0.responds(to: selector) }
-    var subscribersLeft = subs.count
-    let dispatchQueue = DispatchQueue(label: "expo.application.remoteNotification", qos: .userInteractive)
-    var failedCount = 0
-    var newDataCount = 0
-
-    let handler = { (result: UIBackgroundFetchResult) in
-      dispatchQueue.sync {
-        if result == .failed {
-          failedCount += 1
-        } else if result == .newData {
-          newDataCount += 1
-        }
-
-        subscribersLeft -= 1
-
-        if subscribersLeft == 0 {
-          if newDataCount > 0 {
-            completionHandler(.newData)
-          } else if failedCount > 0 {
-            completionHandler(.failed)
-          } else {
-            completionHandler(.noData)
-          }
-        }
-      }
-    }
-
-    if subs.isEmpty {
-      completionHandler(.noData)
-    } else {
-      subs.forEach { subscriber in
-        subscriber.application?(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: handler)
-      }
-    }
-  }
+  // open override func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
+  //   subscribers.forEach { $0.application?(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken) }
+  // }
+
+  // open override func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
+  //   subscribers.forEach { $0.application?(application, didFailToRegisterForRemoteNotificationsWithError: error) }
+  // }
+
+  // open override func application(
+  //   _ application: UIApplication,
+  //   didReceiveRemoteNotification userInfo: [AnyHashable: Any],
+  //   fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void
+  // ) {
+  //   let selector = #selector(application(_:didReceiveRemoteNotification:fetchCompletionHandler:))
+  //   let subs = subscribers.filter { $0.responds(to: selector) }
+  //   var subscribersLeft = subs.count
+  //   let dispatchQueue = DispatchQueue(label: "expo.application.remoteNotification", qos: .userInteractive)
+  //   var failedCount = 0
+  //   var newDataCount = 0
+
+  //   let handler = { (result: UIBackgroundFetchResult) in
+  //     dispatchQueue.sync {
+  //       if result == .failed {
+  //         failedCount += 1
+  //       } else if result == .newData {
+  //         newDataCount += 1
+  //       }
+
+  //       subscribersLeft -= 1
+
+  //       if subscribersLeft == 0 {
+  //         if newDataCount > 0 {
+  //           completionHandler(.newData)
+  //         } else if failedCount > 0 {
+  //           completionHandler(.failed)
+  //         } else {
+  //           completionHandler(.noData)
+  //         }
+  //       }
+  //     }
+  //   }
+
+  //   if subs.isEmpty {
+  //     completionHandler(.noData)
+  //   } else {
+  //     subs.forEach { subscriber in
+  //       subscriber.application?(application, didReceiveRemoteNotification: userInfo, fetchCompletionHandler: handler)
+  //     }
+  //   }
+  // }
 
   // MARK: - Continuing User Activity and Handling Quick Actions
 
diff --git a/node_modules/expo-modules-core/ios/Core/DynamicTypes/DynamicSwiftUIViewType.swift b/node_modules/expo-modules-core/ios/Core/DynamicTypes/DynamicSwiftUIViewType.swift
deleted file mode 100644
index 0ab5287..0000000
--- a/node_modules/expo-modules-core/ios/Core/DynamicTypes/DynamicSwiftUIViewType.swift
+++ /dev/null
@@ -1,59 +0,0 @@
-// Copyright 2025-present 650 Industries. All rights reserved.
-
-internal struct DynamicSwiftUIViewType<ViewType: ExpoSwiftUIView>: AnyDynamicType {
-  let innerType: ViewType.Type
-
-  func wraps<InnerType>(_ type: InnerType.Type) -> Bool {
-    return innerType == InnerType.self
-  }
-
-  func equals(_ type: AnyDynamicType) -> Bool {
-    if let viewType = type as? Self {
-      return viewType.innerType == innerType
-    }
-    return false
-  }
-
-  /**
-   Casts from the React component instance to the view tag (`Int`).
-   */
-  func cast(jsValue: JavaScriptValue, appContext: AppContext) throws -> Any {
-    guard let viewTag = findViewTag(jsValue) else {
-      throw InvalidViewTagException()
-    }
-    return viewTag
-  }
-
-  /**
-   Converts a value of type `Int` to a native view with that tag in the given app context.
-   */
-  func cast<ValueType>(_ value: ValueType, appContext: AppContext) throws -> Any {
-    guard let viewTag = value as? Int else {
-      throw InvalidViewTagException()
-    }
-    guard Thread.isMainThread else {
-      throw NonMainThreadException()
-    }
-    guard let view = appContext.findView(withTag: viewTag, ofType: AnyExpoSwiftUIHostingView.self) else {
-      throw Exceptions.SwiftUIViewNotFound((tag: viewTag, type: innerType.self))
-    }
-    return view.getContentView()
-  }
-
-  var description: String {
-    return "View<\(innerType)>"
-  }
-}
-
-private func findViewTag(_ value: JavaScriptValue) -> Int? {
-  if value.isNumber() {
-    return value.getInt()
-  }
-  if value.isObject() {
-    let nativeTag = value.getObject().getProperty("nativeTag")
-    if nativeTag.isNumber() {
-      return nativeTag.getInt()
-    }
-  }
-  return nil
-}
diff --git a/node_modules/expo-modules-core/ios/Core/Exceptions/CommonExceptions.swift b/node_modules/expo-modules-core/ios/Core/Exceptions/CommonExceptions.swift
index 692104f..dc188c0 100644
--- a/node_modules/expo-modules-core/ios/Core/Exceptions/CommonExceptions.swift
+++ b/node_modules/expo-modules-core/ios/Core/Exceptions/CommonExceptions.swift
@@ -39,11 +39,6 @@ public struct Exceptions {
       "Unable to find the '\(param.type)' view with tag '\(param.tag)'"
     }
   }
-  public final class SwiftUIViewNotFound<ViewType: ExpoSwiftUIView>: GenericException<(tag: Int, type: ViewType.Type)> {
-    override public var reason: String {
-      "Unable to find the '\(param.type)' view with tag '\(param.tag)'"
-    }
-  }
 
   /**
    An exception to throw when there is no module implementing the `EXFileSystemInterface` interface.
diff --git a/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIHostingView.swift b/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIHostingView.swift
index 76e8280..a3ca503 100644
--- a/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIHostingView.swift
+++ b/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIHostingView.swift
@@ -7,7 +7,6 @@ import SwiftUI
  */
 internal protocol AnyExpoSwiftUIHostingView {
   func updateProps(_ rawProps: [String: Any])
-  func getContentView() -> any ExpoSwiftUI.View
 }
 
 extension ExpoSwiftUI {
@@ -22,7 +21,6 @@ extension ExpoSwiftUI {
      It's an environment object that is observed by the content view.
      */
     private let props: Props
-    private let contentView: any ExpoSwiftUI.View
 
     /**
      View controller that embeds the content view into the UIKit view hierarchy.
@@ -33,8 +31,8 @@ extension ExpoSwiftUI {
      Initializes a SwiftUI hosting view with the given SwiftUI view type.
      */
     init(viewType: ContentView.Type, props: Props, appContext: AppContext) {
-      self.contentView = ContentView()
-      let rootView = AnyView(contentView.environmentObject(props))
+      let rootView = ContentView().environmentObject(props)
+
       self.props = props
       self.hostingController = UIHostingController(rootView: rootView)
 
@@ -69,13 +67,6 @@ extension ExpoSwiftUI {
       }
     }
 
-    /**
-     Returns inner SwiftUI view.
-     */
-    public func getContentView() -> any ExpoSwiftUI.View {
-      return contentView
-    }
-
     /**
      Returns a bool value whether the view supports prop with the given name.
      */
diff --git a/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIViewDefinition.swift b/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIViewDefinition.swift
index f602f1f..cdf195a 100644
--- a/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIViewDefinition.swift
+++ b/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIViewDefinition.swift
@@ -6,11 +6,10 @@ import Combine
 /**
  A protocol for SwiftUI views that need to access props.
  */
-public protocol ExpoSwiftUIView<Props>: SwiftUI.View, AnyArgument {
+public protocol ExpoSwiftUIView<Props>: SwiftUI.View {
   associatedtype Props: ExpoSwiftUI.ViewProps
 
   var props: Props { get }
-  static func getDynamicType() -> AnyDynamicType
 
   init()
 }
@@ -24,10 +23,6 @@ public extension ExpoSwiftUIView {
       ForEach(props.children ?? []) { $0 }
     }
   }
-
-  static func getDynamicType() -> AnyDynamicType {
-    return DynamicSwiftUIViewType(innerType: Self.self)
-  }
 }
 
 extension ExpoSwiftUI {
@@ -41,10 +36,6 @@ extension ExpoSwiftUI {
       super.init(HostingView<Props, ViewType>.self, elements: [])
     }
 
-    init(_ viewType: ViewType.Type, elements: [AnyViewDefinitionElement]) {
-      super.init(HostingView<Props, ViewType>.self, elements: elements)
-    }
-
     public override func createView(appContext: AppContext) -> UIView? {
       let props = Props()
       return HostingView(viewType: ViewType.self, props: props, appContext: appContext)
diff --git a/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIViewDefinitionBuilder.swift b/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIViewDefinitionBuilder.swift
deleted file mode 100644
index e8f81e3..0000000
--- a/node_modules/expo-modules-core/ios/Core/Views/SwiftUI/SwiftUIViewDefinitionBuilder.swift
+++ /dev/null
@@ -1,36 +0,0 @@
-// Copyright 2025-present 650 Industries. All rights reserved.
-
-extension ExpoSwiftUI {
-  /**
-   A result builder for the view elements such as prop setters or view events.
-   */
-  @resultBuilder
-  public struct ViewDefinitionBuilder<ViewType: ExpoSwiftUI.View> {
-    public static func buildBlock(_ elements: AnyViewDefinitionElement...) -> [AnyViewDefinitionElement] {
-      return elements
-    }
-
-    /**
-     Accepts functions as a view definition elements.
-     */
-    public static func buildExpression<ElementType: ViewDefinitionFunctionElement>(
-      _ element: ElementType
-    ) -> AnyViewDefinitionElement {
-      return element
-    }
-
-    /**
-     Accepts functions that take the owner as a view definition elements.
-     */
-    public static func buildExpression<ElementType: ViewDefinitionFunctionElement>(
-      _ element: ElementType
-    ) -> AnyViewDefinitionElement where ElementType.ViewType == ViewType {
-      // Enforce async functions to run on the main queue
-      if var function = element as? AnyAsyncFunctionDefinition {
-        function.runOnQueue(.main)
-        function.takesOwner = true
-      }
-      return element
-    }
-  }
-}
